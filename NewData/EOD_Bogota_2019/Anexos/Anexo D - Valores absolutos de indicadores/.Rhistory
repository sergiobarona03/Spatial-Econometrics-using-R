# Reordenar manualmente los niveles de un factor
fct_relevel(new_dataset$Int_attend, "Group 3")
# fct_relevel()
# Reordenar manualmente los niveles de un factor
fct_relevel(new_dataset$Int_attend, "Group 3", after = 2)
# fct_relevel()
# Reordenar manualmente los niveles de un factor
fct_relevel(new_dataset$Int_attend, "Group 3", after = 4)
# fct_relevel()
# Reordenar manualmente los niveles de un factor
fct_relevel(new_dataset$Int_attend, c("a", "b", "c", "d"))
# fct_relevel()
# Reordenar manualmente los niveles de un factor
fct_relevel(new_dataset$Int_attend, c("Group 1"))
# fct_relevel()
# Reordenar manualmente los niveles de un factor
fct_relevel(new_dataset$Int_attend, c("Group 1", "Group 2"),
after = 3)
# fct_relevel()
# Reordenar manualmente los niveles de un factor
fct_relevel(new_dataset$Int_attend, c("Group 1", "Group 2"),
after = 3)
??fct_infreq
# fct_infreq()
# Reordenar los valores de acuerdo con su frecuencia
fct_infreq(new_dataset$Int_attend)
# fct_shift()
# Reordenar moviendo los niveles de izquierda a derecha
fct_shift(new_dataset$Int_attend)
# Declarar variable como factor
new_dataset$Int_attend = factor(new_dataset$Int_attend,
levels = c("Group 1",
"Group 2",
"Group 3",
"Group 4",
"Group 5"),
labels = c("Group A",
"Group B",
"Group C",
"Group D",
"Group E"))
# fct_relevel()
# Reordenar manualmente los niveles de un factor
fct_relevel(new_dataset$Int_attend, c("Group A", "Group B"),
after = 3)
# fct_infreq()
# Reordenar los valores de acuerdo con su frecuencia
fct_infreq(new_dataset$Int_attend)
# fct_shift()
# Reordenar moviendo los niveles de izquierda a derecha
fct_shift(new_dataset$Int_attend)
levels(as.factor(new_dataset$Int_attend))
# fct_recode()
# Recodificar manualmente los niveles de las variables categóricas
fct_recode(new_dataset$Int_attend,
Group alpha = "Group A")
# fct_recode()
# Recodificar manualmente los niveles de las variables categóricas
fct_recode(new_dataset$Int_attend,
´Group alpha´ = "Group A")
# fct_recode()
# Recodificar manualmente los niveles de las variables categóricas
fct_recode(new_dataset$Int_attend,
`Group alpha` = "Group A")
# fct_collapse()
# Agrupar distintos niveles en un grupo específico
fct_collapse(new_dataset$Int_attend,
x = c("Group B", "Group C"))
# fct_collapse()
# Agrupar distintos niveles en un grupo específico
fct_collapse(new_dataset$Int_attend,
`Group beta` = c("Group B", "Group C"))
count(new_dataset, Int_attend)
??fct_lump_prop
# fct_lump_min()
fct_lump_prop(new_dataset$Int_attend,
prop = 0.1, other_level = "Other")
count(new_dataset, Int_attend)
count(new_dataset, Int_attend)[,2]/sum(count(new_dataset, Int_attend)[,2])
count(new_dataset, Int_attend)[,2]/sum(count(new_dataset, Int_attend)[,2])*100
# fct_lump_min()
fct_lump_prop(new_dataset$Int_attend,
prop = 0.11, other_level = "Other")
# fct_lump_min()
fct_lump_prop(new_dataset$Int_attend,
prop = 0.10, other_level = "Other")
??fct_reorder
ggplot(iris, aes(fct_reorder(Species, Sepal.Width), Sepal.Width)) +
geom_boxplot()
# fct_reorder()
# Reordenar factor variable ordenando según otra variable
ggplot2::ggplot(new_dataset, aes(x = fct_reorder(Int_attend, attend),
y = attend)) + geom_boxplot()
# fct_reorder()
# Reordenar factor variable ordenando según otra variable
ggplot2::ggplot(new_dataset, aes(x = Int_attend,
y = attend)) + geom_boxplot()
# fct_reorder()
# Reordenar factor variable ordenando según otra variable
ggplot2::ggplot(new_dataset, aes(x = Int_attend,
y = attend)) + geom_boxplot()
# fct_reorder()
# Reordenar factor variable ordenando según otra variable
ggplot2::ggplot(new_dataset, aes(x = Int_attend,
y = attend, col = Int_attend)) + geom_boxplot() # Gráfico no ordenado
ggplot2::ggplot(new_dataset, aes(x = fct_reorder(Int_attend, attend),
y = attend, col = Int_attend)) + geom_boxplot() # Gráfico ordenado
# fct_reorder()
# Reordenar factor variable ordenando según otra variable
ggplot2::ggplot(new_dataset, aes(x = Int_attend,
y = attend, fill = Int_attend)) + geom_boxplot() # Gráfico no ordenado
ggplot2::ggplot(new_dataset, aes(x = fct_reorder(Int_attend, attend),
y = attend, fill = Int_attend)) + geom_boxplot() # Gráfico ordenado
vec = c(1,2,3,4)
vec %in% c(1,2)
!vec %in% c(1,2)
# Los objetos son nombres para referirnos
# a datos almacenados
x <- 1:6
c
x
# Sensible a mayúsculas
A1 <- 1
a1 <- 2
A1 + 1
#--------------------#
# Nota: Librerías    #
#--------------------#
help("tidyverse")
??tidyverse
??read_excel
?read_excel
#--------------------------#
# B. General: tidyverse    #
#--------------------------#
library(wooldridge)
writexl::write_xlsx(attend,"C:/Users/Portatil/Desktop/Quant_Macro_Model-main/attend.xlsx")
library(tidyverse)
library(readxl)
# IMPORTACIÓN DE DATOS
dataset <- readxl::read_excel("C:/Users/Portatil/Desktop/Quant_Macro_Model-main/attend.xlsx")
dataset <- readxl::read_excel(file.choose())
dataset <- readxl::read_excel(file.choose())
dataset <- readxl::read_excel(file.choose())
# Sintaxis para listas
lista$vector2
lista[[2]]
lista[[2]][1]
# Creación de listas
v1 = c(1, 2, 3, 4)
v2 = c("a", "b", "c", "d", "e")
m1 = matrix(v1,
nrow = 2, ncol = 2, byrow = T)
lista <- list(vector1 = v1, vector2 = v2, matriz1 = m1)
lista
# Sintaxis para listas
lista$vector2
lista[[2]]
lista[[2]][1]
# Definición de una función a partir del condicional
vec1 = 1:5
my_function = function(n){
if (n > 5) {
vec1 = c(vec1, n)
} else {vec1 = vec1}
return(vec1)
}
my_function(10)
data(attend)
library(wooldridge)
data(attend)
??lm
help(lm)
lm(priGPA ~ attend, data = attend)
lm(priGPA ~ 0 + attend, data = attend)
without <- lm(priGPA ~ 0 + attend,
data = attend)
with <- lm(priGPA ~ attend, data = attend)
summary(with)
summary(without)
mean(attend$attend)
sum(attend)
sum(attend$attend)
setwd("C:/Users/Portatil/Desktop/SpatialData/EOD_Bogota_2019")
setwd("C:/Users/Portatil/Desktop/SpatialData/EOD_Bogota_2019/Encuesta_de_Movilidad_2019")
setwd("C:/Users/Portatil/Desktop/SpatialData/EOD_Bogota_2019")
#---------------------------------------#
# Cargar datos y convertir en polígonos #
#---------------------------------------#
ny <- read_sf(dsn="/Zonificacion_shapefiles/ZONAS", layer="Bog_am")
library(sf)
library(classInt)
library(car)
library(spdep)
library(RColorBrewer)
library(StatDA)
library(sf)
library(MASS)
library(tidyverse)
#---------------------------------------#
# Cargar datos y convertir en polígonos #
#---------------------------------------#
ny <- read_sf(dsn="/Zonificacion_shapefiles/ZONAS", layer="Bog_am")
#---------------------------------------#
# Cargar datos y convertir en polígonos #
#---------------------------------------#
ny <- read_sf(dsn="/Zonificacion_shapefiles/ZONAS/", layer="Bog_am")
setwd("C:/Users/Portatil/Desktop/SpatialData/EOD_Bogota_2019")
#---------------------------------------#
# Cargar datos y convertir en polígonos #
#---------------------------------------#
ny <- read_sf(dsn="/Zonificacion_shapefiles/ZONAS/", layer="Bog_am")
#---------------------------------------#
# Cargar datos y convertir en polígonos #
#---------------------------------------#
ny <- read_sf(dsn="C:/Users/Portatil/Desktop/SpatialData/EOD_Bogota_2019/Zonificacion_shapefiles/ZONAS/", layer="Bog_am")
summary(ny)
#---------------------------------------#
# Cargar datos y convertir en polígonos #
#---------------------------------------#
ny <- read_sf(dsn="C:/Users/Portatil/Desktop/SpatialData/EOD_Bogota_2019/Zonificacion_shapefiles/ZONAS/", layer="Bog_am")
summary(ny)
# Convertir SpatialPolygonsDataFrame en data.frame
ny.df <- data.frame(ny)
head(ny.df)            # Primeras filas
tail(ny.df)            # Últimas filas
names(ny.df)           # Nombres de las variables
class(ny.df)           # Clase del objeto
summary(ny.df)         # Resumen descriptivo
# Gráfica de los polígonos
par(mfrow=c(1,1))
plot(ny)
plot(ny)
View(ny)
#---------------------------------------#
# Cargar datos y convertir en polígonos #
#---------------------------------------#
sd <- read_sf(dsn="C:/Users/Portatil/Desktop/SpatialData/EOD_Bogota_2019/Zonificacion_shapefiles/ZONAS/", layer="Bog_am")
summary(sd)
# Convertir SpatialPolygonsDataFrame en data.frame
sd.df <- data.frame(sd)
head(sd.df)            # Primeras filas
tail(sd.df)            # Últimas filas
names(sd.df)           # Nombres de las variables
class(sd.df)           # Clase del objeto
summary(sd.df)         # Resumen descriptivo
# Gráfica de los polígonos
par(mfrow=c(1,1))
plot(sd)
colnames(sd)
levels(as.factor(sd$NOMMun))
# Filtrar para bogotá:
dc <- sd %>% filter(NOMMun == "Bogotá")
df
dc
plot(dc)
plot(sd)
# Filtrar para los siguientes municipios
mun <- c("Soacha", "La Calera")
mun_sd <- sd %>% filteR(NOMMun == mun)
mun_sd <- sd %>% filter(NOMMun == mun)
mun_sd <- sd %>% filter(NOMMun %in% mun)
plot(mun_sp)
plot(mun_sd)
library(readxl)
getwd()
#------------------------------------------------------#
# Cargar datos sobre la Encuesta de Movilidad (2019)   #
#------------------------------------------------------#
dataset_em <- readxl::read_excel("Encuesta_de_Movilidad_2019/Archivos XLSX/PersonasEODH2019.xlsx")
#------------------------------------------------------#
# Cargar datos sobre la Encuesta de Movilidad (2019)   #
#------------------------------------------------------#
dataset_em <- readxl::read_excel("Encuesta_de_Movilidad_2019/Archivos XLSX/PersonasEODH2019.xlsx")
View(dataset_em)
#------------------------#
# Nivel 1: Municipio     #
#------------------------#
var_vector <- c("hogares", "n",
"ingresos",
"poblacion",
"sexo", "edad",
"educ", "ocup",
"tipologia")
sheet_vector <- c(2, 6, 13, 15, 19,
21, 27, 28, 56)
length(sheet_vector)
length(var_vec)
length(var_vector)
setwd("C:/Users/Portatil/Desktop/SpatialData/EOD_Bogota_2019")
setwd("C:/Users/Portatil/Desktop/SpatialData/EOD_Bogota_2019/Anexos/Anexo D - Valores absolutos de indicadores")
data.aux <- readxl::read_excel("02_Anexo D_Socioeconomicos.xlsx",
sheet = sheet_vector[k])
k = 1
data.aux <- readxl::read_excel("02_Anexo D_Socioeconomicos.xlsx",
sheet = sheet_vector[k])
VieW(data.aux)
View(data.aux)
?read_excel
data.aux <- readxl::read_excel("02_Anexo D_Socioeconomicos.xlsx",
sheet = sheet_vector[k],
range = cell_rows(10:100))
data.aux <- readxl::read_excel("02_Anexo D_Socioeconomicos.xlsx",
sheet = sheet_vector[k],
range = cell_rows(9:100))
data.aux <- readxl::read_excel("02_Anexo D_Socioeconomicos.xlsx",
sheet = sheet_vector[k],
range = cell_rows(10:100))
data.aux <- readxl::read_excel("02_Anexo D_Socioeconomicos.xlsx",
sheet = sheet_vector[k],
range = cell_rows(10:100)) %>% na.omit()
input.list <- vector(type = "list",
length = length(sheet_vector))
k = 1
data.aux <- readxl::read_excel("02_Anexo D_Socioeconomicos.xlsx",
sheet = sheet_vector[k],
range = cell_rows(10:100)) %>% na.omit()
input.list[[k]] <- data.aux
input.list <- vector(type = "list",
length = length(sheet_vector))
k = 1
data.aux <- readxl::read_excel("02_Anexo D_Socioeconomicos.xlsx",
sheet = sheet_vector[k],
range = cell_rows(10:100)) %>% na.omit()
input.list[[k]] <- data.aux
input.list <- vector(type = "list",
length = length(sheet_vector))
input.list <- vector("list",
length = length(sheet_vector))
k = 1
data.aux <- readxl::read_excel("02_Anexo D_Socioeconomicos.xlsx",
sheet = sheet_vector[k],
range = cell_rows(10:100)) %>% na.omit()
input.list[[k]] <- data.aux
View(input.list[[1]])
names(input.list[[k]]) <- var_vector[k]
names(input.list)[k] <- var_vector[k]
#------------------------#
# Nivel 1: Municipio     #
#------------------------#
var_vector <- c("hogares", "n",
"ingresos",
"poblacion",
"sexo", "edad",
"educ", "ocup",
"tipologia")
sheet_vector <- c(2, 6, 13, 15, 19,
21, 27, 28, 56)
input.list <- vector("list",
length = length(sheet_vector))
for (k in 1:length(sheet_vector)) {
data.aux <- readxl::read_excel("02_Anexo D_Socioeconomicos.xlsx",
sheet = sheet_vector[k],
range = cell_rows(10:100)) %>% na.omit()
input.list[[k]] <- data.aux
names(input.list)[k] <- var_vector[k]
}
View(input.list[[4]])
View(input.list[[1]])
View(input.list[[2]])
VieW(input.list[[3]])
View(input.list[[3]])
sheet_vector <- c(3, 7, 14, 16, 20,
22, 28, 29, 57)
#------------------------#
# Nivel 1: Municipio     #
#------------------------#
var_vector <- c("hogares", "n",
"ingresos",
"poblacion",
"sexo", "edad",
"educ", "ocup",
"tipologia")
sheet_vector <- c(3, 7, 14, 16, 20,
22, 28, 29, 57)
input.list <- vector("list",
length = length(sheet_vector))
for (k in 1:length(sheet_vector)) {
data.aux <- readxl::read_excel("02_Anexo D_Socioeconomicos.xlsx",
sheet = sheet_vector[k],
range = cell_rows(10:100)) %>% na.omit()
input.list[[k]] <- data.aux
names(input.list)[k] <- var_vector[k]
}
View(input.list[[1]])
View(input.list[[3]])
################################
## Preparación: base de datos ##
##    Encuesta de movilidad   ##
################################
library(readxl)
library(reshape2)
for (k in 1:length(sheet_vector)) {
data.aux <- readxl::read_excel("02_Anexo D_Socioeconomicos.xlsx",
sheet = sheet_vector[k],
range = cell_rows(10:100)) %>% na.omit()
data.aux.melt <- reshape2::melt(data.aux,
id.vars = "Municipio")
input.list[[k]] <- data.aux.melt
names(input.list)[k] <- var_vector[k]
}
View(input.list[[1]])
for (k in 1:length(sheet_vector)) {
data.aux <- readxl::read_excel("02_Anexo D_Socioeconomicos.xlsx",
sheet = sheet_vector[k],
range = cell_rows(10:100)) %>% na.omit()
input.list[[k]] <- data.aux.melt
names(input.list)[k] <- var_vector[k]
}
#---------------------#
# Nivel 2. Localidad  #
#---------------------#
var_vector <- c("hogares", "n",
"ingresos",
"poblacion", "densidad",
"sexo", "edad",
"educ")
mun.list <- vector("list",
length = length(sheet_vector))
for (k in 1:length(sheet_vector)) {
data.aux <- readxl::read_excel("02_Anexo D_Socioeconomicos.xlsx",
sheet = sheet_vector[k],
range = cell_rows(10:100)) %>% na.omit()
mun.list[[k]] <- data.aux.melt
names(mun.list)[k] <- var_vector[k]
}
#---------------------#
# Nivel 2. Localidad  #
#---------------------#
var_vector <- c("hogares", "n",
"ingresos",
"poblacion", "densidad",
"sexo", "edad",
"educ")
sheet_vector <- c(2, 6, 13, 15, 18,
21, 23, 25)
loc.list <- vector("list",
length = length(sheet_vector))
for (k in 1:length(sheet_vector)) {
data.aux <- readxl::read_excel("02_Anexo D_Socioeconomicos.xlsx",
sheet = sheet_vector[k],
range = cell_rows(10:100)) %>% na.omit()
loc.list[[k]] <- data.aux.melt
names(loc.list)[k] <- var_vector[k]
}
View(loc.list[[1]])
k = 1
data.aux <- readxl::read_excel("02_Anexo D_Socioeconomicos.xlsx",
sheet = sheet_vector[k],
range = cell_rows(10:100)) %>% na.omit()
data.au
data.aux
rm(data.aux.melt)
#------------------------#
# Nivel 1: Municipio     #
#------------------------#
var_vector <- c("hogares", "n",
"ingresos",
"poblacion",
"sexo", "edad",
"educ", "ocup",
"tipologia")
sheet_vector <- c(3, 7, 14, 16, 20,
22, 28, 29, 57)
mun.list <- vector("list",
length = length(sheet_vector))
for (k in 1:length(sheet_vector)) {
data.aux <- readxl::read_excel("02_Anexo D_Socioeconomicos.xlsx",
sheet = sheet_vector[k],
range = cell_rows(10:100)) %>% na.omit()
mun.list[[k]] <- data.aux
names(mun.list)[k] <- var_vector[k]
}
#---------------------#
# Nivel 2. Localidad  #
#---------------------#
var_vector <- c("hogares", "n",
"ingresos",
"poblacion", "densidad",
"sexo", "edad",
"educ")
sheet_vector <- c(2, 6, 13, 15, 18,
21, 23, 25)
loc.list <- vector("list",
length = length(sheet_vector))
for (k in 1:length(sheet_vector)) {
data.aux <- readxl::read_excel("02_Anexo D_Socioeconomicos.xlsx",
sheet = sheet_vector[k],
range = cell_rows(10:100)) %>% na.omit()
loc.list[[k]] <- data.aux
names(loc.list)[k] <- var_vector[k]
}
View(loc.list[[2]])
#---------------------#
# Nivel 3: UTAM       #
#---------------------#
var_vector <- c("hogares","densidad",
"motorizacion",
"autos",
"motos",
"bicis")
sheet_vector <- c(4, 19, 41, 45,
49,53)
utam.list <- vector("list",
length = length(sheet_vector))
for (k in 1:length(sheet_vector)) {
data.aux <- readxl::read_excel("02_Anexo D_Socioeconomicos.xlsx",
sheet = sheet_vector[k],
range = cell_rows(10:100)) %>% na.omit()
utam.list[[k]] <- data.aux
names(utam.list)[k] <- var_vector[k]
}
